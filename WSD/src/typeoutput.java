
import com.sun.org.apache.regexp.internal.StreamCharacterIterator;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import rita.wordnet.RiWordnet;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Vikash
 */
public class typeoutput extends javax.swing.JPanel {
    public static ArrayList<String> wstr = new ArrayList<String>();

    /**
     * Creates new form typeoutput
     */
    Image img;
    public typeoutput()  {
        initComponents();
        //System.out.println(" i am in tyout ");
        
        ImageIcon ic = new ImageIcon(getClass().getResource("gr3.jpg"));
        
        img = ic.getImage();
       // System.out.println(" i am in tyout ");
        Dimension d = new Dimension(img.getWidth(null), img.getHeight(null));
        setPreferredSize(d);
        setMinimumSize(d);
        setMaximumSize(d);
        setSize(d);
        res.setText("");
        wstr.clear();
        
        String query = inputClass.type.toLowerCase();
        String ss = inputClass.wrd;
        System.out.println( ss +  "    " + query);
        
        if(query.equals("hypernyms")){
            RiWordnet wordnet2 = new RiWordnet(null);
            String pos = wordnet2.getBestPos(ss);
            //ArrayList<String> wstr = new ArrayList<>();
            String result[] = wordnet2.getAllHypernyms(ss, pos);
            for(int i=0; i<result.length; i++){
                System.out.println("  aaa=  " + result[i]);
                wstr.add(result[i]);
                
            }
            
        }
        else if(query.equals("hyponyms")){
            RiWordnet wordnet2 = new RiWordnet(null);
            String pos = wordnet2.getBestPos(ss);
            //ArrayList<String> wstr = new ArrayList<>();
            String result[] = wordnet2.getAllHyponyms(ss, pos);
            for(int i=0; i<result.length; i++){
                System.out.println("  aaa=  " + result[i]);
                wstr.add(result[i]);
                
            }
            
       }
        else if(query.equals("synonyms")){
            RiWordnet wordnet2 = new RiWordnet(null);
            String pos = wordnet2.getBestPos(ss);
           // ArrayList<String> wstr = new ArrayList<>();
            String result[] = wordnet2.getAllSynonyms(ss, pos, 20);
            for(int i=0; i<result.length; i++){
                System.out.println("  aaa=  " + result[i]);
                wstr.add(result[i]);
                 
            }
            
        }
        else if(query.equals("examples")) {
            RiWordnet wordnet2 = new RiWordnet(null);
            String pos = wordnet2.getBestPos(ss);
           // ArrayList<String> wstr = new ArrayList<>();
            String result[] = wordnet2.getAllExamples(ss, pos);
            for(int i=0; i<result.length; i++){
                System.out.println("  aaa =  " + result[i]);
                wstr.add(result[i]);
                
            }
        }
        else if(query.equals("senses")){
            RiWordnet wordnet2 = new RiWordnet(null);
            String pos = wordnet2.getBestPos(ss);
            //ArrayList<String> wstr = new ArrayList<String>();
            String result[] = wordnet2.getAllSynsets(ss, pos);
            for(int i=0; i<result.length; i++){
                System.out.println("  aaa=  " + result[i]);
                wstr.add(result[i]);
                System.out.println("wstr[i] = " + wstr.get(i));
                
            }
           
        }
        
        
         for(int i = 0; i < wstr.size(); i++){
            res.setText(res.getText() + "\n" + wstr.get(i));
        }
    
    }

    

    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        g.drawImage(img, 0, 0, this);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        res = new javax.swing.JTextArea();
        back = new javax.swing.JLabel();
        exit = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(795, 540));

        res.setEditable(false);
        res.setColumns(20);
        res.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 24)); // NOI18N
        res.setLineWrap(true);
        res.setRows(5);
        jScrollPane1.setViewportView(res);

        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/back_button.png"))); // NOI18N
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });

        exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exitButton.png"))); // NOI18N
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(161, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        CardLayout card = (CardLayout) (mainstart.mnpublic.tray).getLayout();
        card.show(mainstart.mnpublic.tray,"card2");
    }//GEN-LAST:event_backMouseClicked

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitMouseClicked

    
    
    
    public  void getResults() {
        String query = inputClass.type.toLowerCase();
        String ss = inputClass.wrd;
        System.out.println( ss +  "    " + query);
        
        if(query == "hypernyms"){
            RiWordnet wordnet2 = new RiWordnet(null);
            String pos = wordnet2.getBestPos(ss);
            //ArrayList<String> wstr = new ArrayList<>();
            String result[] = wordnet2.getAllHypernyms(ss, pos);
            for(int i=0; i<result.length; i++){
                System.out.println("  aaa=  " + result[i]);
                wstr.add(result[i]);
                
            }
            
        }
        else if(query == "hyponyms"){
            RiWordnet wordnet2 = new RiWordnet(null);
            String pos = wordnet2.getBestPos(ss);
            //ArrayList<String> wstr = new ArrayList<>();
            String result[] = wordnet2.getAllHyponyms(ss, pos);
            for(int i=0; i<result.length; i++){
                System.out.println("  aaa=  " + result[i]);
                wstr.add(result[i]);
                
            }
            
       }
        else if(query == "synonyms"){
            RiWordnet wordnet2 = new RiWordnet(null);
            String pos = wordnet2.getBestPos(ss);
           // ArrayList<String> wstr = new ArrayList<>();
            String result[] = wordnet2.getAllSynonyms(ss, pos, 20);
            for(int i=0; i<result.length; i++){
                System.out.println("  aaa=  " + result[i]);
                wstr.add(result[i]);
                 
            }
            
        }
        else if(query == "examples") {
            RiWordnet wordnet2 = new RiWordnet(null);
            String pos = wordnet2.getBestPos(ss);
           // ArrayList<String> wstr = new ArrayList<>();
            String result[] = wordnet2.getAllExamples(ss, pos);
            for(int i=0; i<result.length; i++){
                System.out.println("  aaa =  " + result[i]);
                wstr.add(result[i]);
                
            }
        }
        else if(query == "senses"){
            RiWordnet wordnet2 = new RiWordnet(null);
            String pos = wordnet2.getBestPos(ss);
            //ArrayList<String> wstr = new ArrayList<String>();
            String result[] = wordnet2.getAllSynsets(ss, pos);
            for(int i=0; i<result.length; i++){
                System.out.println("  aaa=  " + result[i]);
                wstr.add(result[i]);
                System.out.println("wstr[i] = " + wstr.get(i));
                
            }
           
        }
       
    }
    
    
    
    
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private javax.swing.JLabel exit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea res;
    // End of variables declaration//GEN-END:variables
}
